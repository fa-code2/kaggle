import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

file_path = "/kaggle/input/house-price-dataset/large_house_prices.csv"  # Change path if needed
data = pd.read_csv(file_path)

data.head()

data.info()

data.describe()

data.duplicated().sum()

sns.scatterplot(x=data['House Size (sq ft)'],y=data['Price ($1000s)'])
plt.grid()
#Data Visualization

plt.figure(figsize=(10,6))
sns.regplot(x='House Size (sq ft)',y='Price ($1000s)',data=data)
plt.grid()

X = np.array(data['House Size (sq ft)']).reshape(-1,1)  
y = data['Price ($1000s)']                            

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2) 

X_train.shape

from sklearn.linear_model import LinearRegression

model = LinearRegression() # Default, fit_intercept=True i.e computes 'b'
# model = LinearRegression(fit_intercept=False)  # Forces 'b' to be 0, No Intercept in case of Mean-Centered Data Only.

model.fit(X_train,y_train)

print('Linear Model Coeff(m)', model.coef_) # m/slope
print('Linear Model Coeff(b)', model.intercept_)

y_pred = model.predict(X_test)

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error


# Compute errors
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test,y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"Mean Absolute Error (MAE)  : {mae:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Calculate residuals (errors)
residuals = y_test - y_pred

plt.scatter(X_test, residuals)
plt.axhline(y=0, color='r', linestyle='--')
plt.title("Residuals Plot")
plt.xlabel("Number of Rooms")
plt.ylabel("Residuals")
plt.show()

plt.scatter(X_test, y_test, color='blue', label='Actual Price')
plt.plot(X_test, y_pred, color='red', label='Predicted Price')
plt.title("House Size (sq ft) vs Price ($1000s) ")
plt.xlabel("House Size (sq ft)")
plt.ylabel("Price ($1000s)")
plt.legend()
plt.show()

accuracy = model.score(X_test,y_test)
accuracy

House = np.array([40])
House = House.reshape(-1,1)

Price = model.predict(House)
print('Price Predictions =', Price)
