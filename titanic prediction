{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"},{"sourceId":10550745,"sourceType":"datasetVersion","datasetId":6528078}],"dockerImageVersionId":30822,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/fatimaaslam8/titanic-prediction?scriptVersionId=219315930\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.393622Z","iopub.execute_input":"2025-01-26T11:41:34.394001Z","iopub.status.idle":"2025-01-26T11:41:34.401998Z","shell.execute_reply.started":"2025-01-26T11:41:34.393972Z","shell.execute_reply":"2025-01-26T11:41:34.400854Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n/kaggle/input/data-titanic/train.csv\n/kaggle/input/data-titanic/test.csv\n/kaggle/input/data-titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":170},{"cell_type":"code","source":"import pandas as pd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.403443Z","iopub.execute_input":"2025-01-26T11:41:34.403805Z","iopub.status.idle":"2025-01-26T11:41:34.416542Z","shell.execute_reply.started":"2025-01-26T11:41:34.403767Z","shell.execute_reply":"2025-01-26T11:41:34.415548Z"}},"outputs":[],"execution_count":171},{"cell_type":"code","source":"\ntest = pd.read_csv('/kaggle/input/data-titanic/test.csv')\ndata = pd.read_csv('/kaggle/input/data-titanic/train.csv')\ntest_ids=test[\"PassengerId\"]\n\ndef clean(data):\n    data = data.drop([\"Ticket\",\"Cabin\",\"Name\",\"PassengerId\"],axis=1)\n    cols = [\"SibSp\",\"Parch\",\"Fare\",\"Age\"]\n    for col in cols:\n        data[col].fillna(data[col].median(),inplace=True)\n    \n\n    data.Embarked.fillna(\"U\",inplace=True)\n    return data\n\ndata = clean(data)\ntest = clean(test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.418549Z","iopub.execute_input":"2025-01-26T11:41:34.418905Z","iopub.status.idle":"2025-01-26T11:41:34.449485Z","shell.execute_reply.started":"2025-01-26T11:41:34.418868Z","shell.execute_reply":"2025-01-26T11:41:34.448332Z"}},"outputs":[],"execution_count":172},{"cell_type":"code","source":"data.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.45077Z","iopub.execute_input":"2025-01-26T11:41:34.45111Z","iopub.status.idle":"2025-01-26T11:41:34.463422Z","shell.execute_reply.started":"2025-01-26T11:41:34.451071Z","shell.execute_reply":"2025-01-26T11:41:34.462325Z"}},"outputs":[{"execution_count":173,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n0         0       3    male  22.0      1      0   7.2500        S\n1         1       1  female  38.0      1      0  71.2833        C\n2         1       3  female  26.0      0      0   7.9250        S\n3         1       1  female  35.0      1      0  53.1000        S\n4         0       3    male  35.0      0      0   8.0500        S","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":173},{"cell_type":"code","source":"test.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.464652Z","iopub.execute_input":"2025-01-26T11:41:34.465056Z","iopub.status.idle":"2025-01-26T11:41:34.488469Z","shell.execute_reply.started":"2025-01-26T11:41:34.465018Z","shell.execute_reply":"2025-01-26T11:41:34.48726Z"}},"outputs":[{"execution_count":174,"output_type":"execute_result","data":{"text/plain":"   Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n0       3    male  34.5      0      0   7.8292        Q\n1       3  female  47.0      1      0   7.0000        S\n2       2    male  62.0      0      0   9.6875        Q\n3       3    male  27.0      0      0   8.6625        S\n4       3  female  22.0      1      1  12.2875        S","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":174},{"cell_type":"code","source":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ncols = [\"Sex\",\"Embarked\"]\n\nfor col in cols:\n    data[col] = le.fit_transform(data[col])\n    test[col] = le.transform(test[col])\n    print(le.classes_)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.489486Z","iopub.execute_input":"2025-01-26T11:41:34.489839Z","iopub.status.idle":"2025-01-26T11:41:34.506762Z","shell.execute_reply.started":"2025-01-26T11:41:34.489809Z","shell.execute_reply":"2025-01-26T11:41:34.505677Z"}},"outputs":[{"name":"stdout","text":"['female' 'male']\n['C' 'Q' 'S' 'U']\n","output_type":"stream"}],"execution_count":175},{"cell_type":"code","source":"data.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.507867Z","iopub.execute_input":"2025-01-26T11:41:34.508237Z","iopub.status.idle":"2025-01-26T11:41:34.530897Z","shell.execute_reply.started":"2025-01-26T11:41:34.5082Z","shell.execute_reply":"2025-01-26T11:41:34.529807Z"}},"outputs":[{"execution_count":176,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n0         0       3    1  22.0      1      0   7.2500         2\n1         1       1    0  38.0      1      0  71.2833         0\n2         1       3    0  26.0      0      0   7.9250         2\n3         1       1    0  35.0      1      0  53.1000         2\n4         0       3    1  35.0      0      0   8.0500         2","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":176},{"cell_type":"code","source":"\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.532208Z","iopub.execute_input":"2025-01-26T11:41:34.532608Z","iopub.status.idle":"2025-01-26T11:41:34.546237Z","shell.execute_reply.started":"2025-01-26T11:41:34.532568Z","shell.execute_reply":"2025-01-26T11:41:34.54517Z"}},"outputs":[],"execution_count":177},{"cell_type":"code","source":"y = data[\"Survived\"]\nX = data.drop(\"Survived\", axis=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.549177Z","iopub.execute_input":"2025-01-26T11:41:34.549564Z","iopub.status.idle":"2025-01-26T11:41:34.564184Z","shell.execute_reply.started":"2025-01-26T11:41:34.549532Z","shell.execute_reply":"2025-01-26T11:41:34.563188Z"}},"outputs":[],"execution_count":178},{"cell_type":"code","source":"test = test[X.columns]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.56569Z","iopub.execute_input":"2025-01-26T11:41:34.566024Z","iopub.status.idle":"2025-01-26T11:41:34.583581Z","shell.execute_reply.started":"2025-01-26T11:41:34.565996Z","shell.execute_reply":"2025-01-26T11:41:34.58268Z"}},"outputs":[],"execution_count":179},{"cell_type":"code","source":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42 )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.584672Z","iopub.execute_input":"2025-01-26T11:41:34.584977Z","iopub.status.idle":"2025-01-26T11:41:34.604915Z","shell.execute_reply.started":"2025-01-26T11:41:34.584951Z","shell.execute_reply":"2025-01-26T11:41:34.603964Z"}},"outputs":[],"execution_count":180},{"cell_type":"code","source":"clf = RandomForestClassifier(n_estimators=100, random_state=42, max_depth=10, min_samples_split=5)\nclf.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.605852Z","iopub.execute_input":"2025-01-26T11:41:34.606137Z","iopub.status.idle":"2025-01-26T11:41:34.799586Z","shell.execute_reply.started":"2025-01-26T11:41:34.606112Z","shell.execute_reply":"2025-01-26T11:41:34.798599Z"}},"outputs":[{"execution_count":181,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(max_depth=10, min_samples_split=5, random_state=42)","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=10, min_samples_split=5, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(max_depth=10, min_samples_split=5, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":181},{"cell_type":"code","source":"prediction = clf.predict(X_val)\n\naccuracy_score(y_val,prediction)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.800586Z","iopub.execute_input":"2025-01-26T11:41:34.800964Z","iopub.status.idle":"2025-01-26T11:41:34.818807Z","shell.execute_reply.started":"2025-01-26T11:41:34.800929Z","shell.execute_reply":"2025-01-26T11:41:34.81791Z"}},"outputs":[{"execution_count":182,"output_type":"execute_result","data":{"text/plain":"0.8435754189944135"},"metadata":{}}],"execution_count":182},{"cell_type":"code","source":"\nsubmission_preds = clf.predict(test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.819775Z","iopub.execute_input":"2025-01-26T11:41:34.820119Z","iopub.status.idle":"2025-01-26T11:41:34.837982Z","shell.execute_reply.started":"2025-01-26T11:41:34.820092Z","shell.execute_reply":"2025-01-26T11:41:34.836871Z"}},"outputs":[],"execution_count":183},{"cell_type":"code","source":"df = pd.DataFrame({\n    \"PassengerId\": test_ids,\n    \"Survived\": submission_preds\n})\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.838918Z","iopub.execute_input":"2025-01-26T11:41:34.839306Z","iopub.status.idle":"2025-01-26T11:41:34.844325Z","shell.execute_reply.started":"2025-01-26T11:41:34.839267Z","shell.execute_reply":"2025-01-26T11:41:34.843267Z"}},"outputs":[],"execution_count":184},{"cell_type":"code","source":"df.to_csv(\"submission.csv\",index=False)\nprint(\"CSV file 'submission.csv' has been saved!\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T11:41:34.845444Z","iopub.execute_input":"2025-01-26T11:41:34.845735Z","iopub.status.idle":"2025-01-26T11:41:34.862824Z","shell.execute_reply.started":"2025-01-26T11:41:34.845704Z","shell.execute_reply":"2025-01-26T11:41:34.861634Z"}},"outputs":[{"name":"stdout","text":"CSV file 'submission.csv' has been saved!\n","output_type":"stream"}],"execution_count":185},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}